{"ast":null,"code":"/*!\n * Connect - session - Cookie\n * Copyright(c) 2010 Sencha Inc.\n * Copyright(c) 2011 TJ Holowaychuk\n * MIT Licensed\n */\n\n'use strict';\n\n/**\n * Module dependencies.\n */\nvar cookie = require('cookie');\nvar deprecate = require('depd')('express-session');\n\n/**\n * Initialize a new `Cookie` with the given `options`.\n *\n * @param {IncomingMessage} req\n * @param {Object} options\n * @api private\n */\n\nvar Cookie = module.exports = function Cookie(options) {\n  this.path = '/';\n  this.maxAge = null;\n  this.httpOnly = true;\n  if (options) {\n    if (typeof options !== 'object') {\n      throw new TypeError('argument options must be a object');\n    }\n    for (var key in options) {\n      if (key !== 'data') {\n        this[key] = options[key];\n      }\n    }\n  }\n  if (this.originalMaxAge === undefined || this.originalMaxAge === null) {\n    this.originalMaxAge = this.maxAge;\n  }\n};\n\n/*!\n * Prototype.\n */\n\nCookie.prototype = {\n  /**\n   * Set expires `date`.\n   *\n   * @param {Date} date\n   * @api public\n   */\n\n  set expires(date) {\n    this._expires = date;\n    this.originalMaxAge = this.maxAge;\n  },\n  /**\n   * Get expires `date`.\n   *\n   * @return {Date}\n   * @api public\n   */\n\n  get expires() {\n    return this._expires;\n  },\n  /**\n   * Set expires via max-age in `ms`.\n   *\n   * @param {Number} ms\n   * @api public\n   */\n\n  set maxAge(ms) {\n    if (ms && typeof ms !== 'number' && !(ms instanceof Date)) {\n      throw new TypeError('maxAge must be a number or Date');\n    }\n    if (ms instanceof Date) {\n      deprecate('maxAge as Date; pass number of milliseconds instead');\n    }\n    this.expires = typeof ms === 'number' ? new Date(Date.now() + ms) : ms;\n  },\n  /**\n   * Get expires max-age in `ms`.\n   *\n   * @return {Number}\n   * @api public\n   */\n\n  get maxAge() {\n    return this.expires instanceof Date ? this.expires.valueOf() - Date.now() : this.expires;\n  },\n  /**\n   * Return cookie data object.\n   *\n   * @return {Object}\n   * @api private\n   */\n\n  get data() {\n    return {\n      originalMaxAge: this.originalMaxAge,\n      expires: this._expires,\n      secure: this.secure,\n      httpOnly: this.httpOnly,\n      domain: this.domain,\n      path: this.path,\n      sameSite: this.sameSite\n    };\n  },\n  /**\n   * Return a serialized cookie string.\n   *\n   * @return {String}\n   * @api public\n   */\n\n  serialize: function (name, val) {\n    return cookie.serialize(name, val, this.data);\n  },\n  /**\n   * Return JSON representation of this cookie.\n   *\n   * @return {Object}\n   * @api private\n   */\n\n  toJSON: function () {\n    return this.data;\n  }\n};","map":{"version":3,"names":["cookie","require","deprecate","Cookie","module","exports","options","path","maxAge","httpOnly","TypeError","key","originalMaxAge","undefined","prototype","expires","date","_expires","ms","Date","now","valueOf","data","secure","domain","sameSite","serialize","name","val","toJSON"],"sources":["K:/machine/rest_api/sync/html/client/client/node_modules/express-session/session/cookie.js"],"sourcesContent":["/*!\n * Connect - session - Cookie\n * Copyright(c) 2010 Sencha Inc.\n * Copyright(c) 2011 TJ Holowaychuk\n * MIT Licensed\n */\n\n'use strict';\n\n/**\n * Module dependencies.\n */\n\nvar cookie = require('cookie')\nvar deprecate = require('depd')('express-session')\n\n/**\n * Initialize a new `Cookie` with the given `options`.\n *\n * @param {IncomingMessage} req\n * @param {Object} options\n * @api private\n */\n\nvar Cookie = module.exports = function Cookie(options) {\n  this.path = '/';\n  this.maxAge = null;\n  this.httpOnly = true;\n\n  if (options) {\n    if (typeof options !== 'object') {\n      throw new TypeError('argument options must be a object')\n    }\n\n    for (var key in options) {\n      if (key !== 'data') {\n        this[key] = options[key]\n      }\n    }\n  }\n\n  if (this.originalMaxAge === undefined || this.originalMaxAge === null) {\n    this.originalMaxAge = this.maxAge\n  }\n};\n\n/*!\n * Prototype.\n */\n\nCookie.prototype = {\n\n  /**\n   * Set expires `date`.\n   *\n   * @param {Date} date\n   * @api public\n   */\n\n  set expires(date) {\n    this._expires = date;\n    this.originalMaxAge = this.maxAge;\n  },\n\n  /**\n   * Get expires `date`.\n   *\n   * @return {Date}\n   * @api public\n   */\n\n  get expires() {\n    return this._expires;\n  },\n\n  /**\n   * Set expires via max-age in `ms`.\n   *\n   * @param {Number} ms\n   * @api public\n   */\n\n  set maxAge(ms) {\n    if (ms && typeof ms !== 'number' && !(ms instanceof Date)) {\n      throw new TypeError('maxAge must be a number or Date')\n    }\n\n    if (ms instanceof Date) {\n      deprecate('maxAge as Date; pass number of milliseconds instead')\n    }\n\n    this.expires = typeof ms === 'number'\n      ? new Date(Date.now() + ms)\n      : ms;\n  },\n\n  /**\n   * Get expires max-age in `ms`.\n   *\n   * @return {Number}\n   * @api public\n   */\n\n  get maxAge() {\n    return this.expires instanceof Date\n      ? this.expires.valueOf() - Date.now()\n      : this.expires;\n  },\n\n  /**\n   * Return cookie data object.\n   *\n   * @return {Object}\n   * @api private\n   */\n\n  get data() {\n    return {\n      originalMaxAge: this.originalMaxAge\n      , expires: this._expires\n      , secure: this.secure\n      , httpOnly: this.httpOnly\n      , domain: this.domain\n      , path: this.path\n      , sameSite: this.sameSite\n    }\n  },\n\n  /**\n   * Return a serialized cookie string.\n   *\n   * @return {String}\n   * @api public\n   */\n\n  serialize: function(name, val){\n    return cookie.serialize(name, val, this.data);\n  },\n\n  /**\n   * Return JSON representation of this cookie.\n   *\n   * @return {Object}\n   * @api private\n   */\n\n  toJSON: function(){\n    return this.data;\n  }\n};\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}